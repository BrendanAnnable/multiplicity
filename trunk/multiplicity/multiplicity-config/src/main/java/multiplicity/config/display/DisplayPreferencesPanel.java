/*
 * DisplayPreferences2.java
 *
 * Created on March 31, 2010, 9:54 PM
 */

package multiplicity.config.display;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.Arrays;

import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;

import multiplicity.config.PreferencesItem;

/**
 *
 * @author  dcs0ah1
 */
public class DisplayPreferencesPanel extends javax.swing.JPanel implements PreferencesItem {
	private static final long serialVersionUID = 8757133417077939163L;
	private DisplayPreferences prefs;

	/** Creates new form DisplayPreferences2 */
	public DisplayPreferencesPanel(DisplayPreferences prefs) {
		this.prefs = prefs;
		initComponents();
		loadCurrentSettings();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		displaySelector = new javax.swing.JComboBox();
		fullScreen = new javax.swing.JCheckBox();
		jLabel2 = new javax.swing.JLabel();
		antiAlias = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		stencilBits = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		alphaBits = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		depthBits = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		displayShapeFile = new javax.swing.JTextField();
		browseShapeFile = new javax.swing.JButton();
		defaultDisplayShape = new javax.swing.JCheckBox();

		jLabel1.setText("Display Size:");
		jLabel1.setName("jLabel1"); // NOI18N

		displaySelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		displaySelector.setName("displaySelector"); // NOI18N
		displaySelector.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				displaySelectorItemStateChanged(evt);
			}
		});

		fullScreen.setText("Full Screen:");
		fullScreen.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
		fullScreen.setName("fullScreen"); // NOI18N
		fullScreen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fullScreenActionPerformed(evt);
			}
		});

		jLabel2.setText("Minimum anti-alias samples:");
		jLabel2.setName("jLabel2"); // NOI18N

		antiAlias.setText("jTextField1");
		antiAlias.setName("antiAlias"); // NOI18N
		antiAlias.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				antiAliasKeyReleased(evt);
			}
		});

		jLabel3.setText("Stencil bits:");
		jLabel3.setName("jLabel3"); // NOI18N

		stencilBits.setText("jTextField1");
		stencilBits.setName("stencilBits"); // NOI18N
		stencilBits.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				stencilBitsKeyReleased(evt);
			}
		});

		jLabel4.setText("Alpha bits:");
		jLabel4.setName("jLabel4"); // NOI18N

		alphaBits.setText("jTextField1");
		alphaBits.setName("alphaBits"); // NOI18N
		alphaBits.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				alphaBitsKeyReleased(evt);
			}
		});

		jLabel5.setText("Depth bits:");
		jLabel5.setName("jLabel5"); // NOI18N

		depthBits.setText("jTextField1");
		depthBits.setName("depthBits"); // NOI18N
		depthBits.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				depthBitsKeyReleased(evt);
			}
		});

		jLabel6.setText("Display shape:");
		jLabel6.setName("jLabel6"); // NOI18N

		displayShapeFile.setEditable(false);
		displayShapeFile.setText("jTextField1");
		displayShapeFile.setMinimumSize(new java.awt.Dimension(280, 28));
		displayShapeFile.setName("displayShapeFile"); // NOI18N

		browseShapeFile.setText("Browse...");
		browseShapeFile.setName("browseShapeFile"); // NOI18N
		browseShapeFile.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				browseShapeFileActionPerformed(evt);
			}
		});

		defaultDisplayShape.setText("Default rectangle shape display:");
		defaultDisplayShape.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
		defaultDisplayShape.setName("defaultDisplayShape"); // NOI18N
		defaultDisplayShape.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				defaultDisplayShapeItemStateChanged(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jLabel1)
										.addGap(18, 18, 18)
										.addComponent(displaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(fullScreen))
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel2)
														.addComponent(jLabel3)
														.addComponent(jLabel4)
														.addComponent(jLabel5)
														.addComponent(jLabel6))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(depthBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(alphaBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(stencilBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(antiAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGroup(layout.createSequentialGroup()
																		.addComponent(displayShapeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(browseShapeFile))
																		.addComponent(defaultDisplayShape))))
																		.addContainerGap(107, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel1)
								.addComponent(displaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(fullScreen))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel2)
										.addComponent(antiAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel3)
												.addComponent(stencilBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel4)
														.addComponent(alphaBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jLabel5)
																.addComponent(depthBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(jLabel6)
																		.addComponent(displayShapeFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(browseShapeFile))
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(defaultDisplayShape)
																		.addContainerGap(30, Short.MAX_VALUE))
		);
	}// </editor-fold>//GEN-END:initComponents

	private void displaySelectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displaySelectorItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED && displaySelector != null) {
			DisplayMode m = (DisplayMode) displaySelector.getSelectedItem();
			setSelectedDisplayMode(m);
		}
	}//GEN-LAST:event_displaySelectorItemStateChanged

	private void fullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullScreenActionPerformed
		prefs.setFullScreen(fullScreen.isSelected());
	}//GEN-LAST:event_fullScreenActionPerformed

	private void antiAliasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_antiAliasKeyReleased
		prefs.setMinimumAntiAliasSamples(getNumberFromTextField(antiAlias));
	}//GEN-LAST:event_antiAliasKeyReleased


	private void stencilBitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stencilBitsKeyReleased
		prefs.setStencilBits(getNumberFromTextField(stencilBits));
	}//GEN-LAST:event_stencilBitsKeyReleased

	private void alphaBitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alphaBitsKeyReleased
		prefs.setAlphaBits(getNumberFromTextField(alphaBits));
	}//GEN-LAST:event_alphaBitsKeyReleased

	private void depthBitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_depthBitsKeyReleased
		prefs.setDepthBits(getNumberFromTextField(depthBits));
	}//GEN-LAST:event_depthBitsKeyReleased

	private void browseShapeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseShapeFileActionPerformed
		final JFileChooser fc = new JFileChooser(new File(prefs.getDisplayShape()));
		fc.setFileFilter(new OBJFilter());
		int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            displayShapeFile.setText(file.getAbsolutePath());
            prefs.setDisplayShape(file.getAbsolutePath());
        }
	}//GEN-LAST:event_browseShapeFileActionPerformed

	private void defaultDisplayShapeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_defaultDisplayShapeItemStateChanged
		prefs.setUseDefaultShapeFlag(defaultDisplayShape.isSelected());
    	if (defaultDisplayShape.isSelected()){
    		browseShapeFile.setEnabled(false);
    	}else{
    		browseShapeFile.setEnabled(true);
    	}
	}//GEN-LAST:event_defaultDisplayShapeItemStateChanged

	private int getNumberFromTextField(JTextField tf) {
		try {
			int num = Integer.parseInt(tf.getText());
			tf.setForeground(Color.black);
			return num;
		}catch(NumberFormatException ex) {
			tf.setForeground(Color.red);
		}    
		return 0;
	}

	private DisplayMode[] getDisplayModes() {
		DisplayMode[] modes = null;
		try {
			modes = Display.getAvailableDisplayModes();
			Arrays.sort(modes, new DisplayModeComparator());
			Display.destroy();
		} catch (LWJGLException e) {
			e.printStackTrace();
		}
		return modes;
	}

	private int getCurrentDisplayModeIndex(DisplayMode[] modes) {
		for(int i = 0; i < modes.length; i++) {
			DisplayMode m = modes[i];

			if(m.getHeight() == prefs.getHeight() &&
					m.getWidth() == prefs.getWidth() &&
					m.getBitsPerPixel() == prefs.getBitsPerPixel() &&
					m.getFrequency() == prefs.getFrequency())
			{
				return i;
			}
		}

		return -1;
	}

	public DisplayMode getCurrentDisplayMode(DisplayMode[] modes) {
		for(DisplayMode m : modes) {
			if(m.getHeight() == prefs.getHeight() &&
					m.getWidth() == prefs.getWidth() &&
					m.getBitsPerPixel() == prefs.getBitsPerPixel() &&
					m.getFrequency() == prefs.getFrequency())
			{
				return m;
			}
		}

		return null;
	}

	private void setSelectedDisplayMode(DisplayMode m) {
		prefs.setWidth(m.getWidth());
		prefs.setHeight(m.getHeight());
		prefs.setBitsPerPixel(m.getBitsPerPixel());
		prefs.setFrequency(m.getFrequency());
	}

	private void loadCurrentSettings() {
		initDisplaySelector();
		initFullScreen();
		antiAlias.setText("" + prefs.getMinimumAntiAliasSamples());
		alphaBits.setText("" + prefs.getAlphaBits());
		stencilBits.setText("" + prefs.getStencilBits());
		depthBits.setText("" + prefs.getDepthBits());
		displayShapeFile.setText(prefs.getDisplayShape());
		defaultDisplayShape.setSelected(prefs.getUseDefaultShapeFlag());
	}

	private void initFullScreen() {
		fullScreen.setSelected(prefs.getFullScreen());
	}

	private void initDisplaySelector() {
		// get the saved display mode as loading the list causes a change
		DisplayMode currentMode = getCurrentDisplayMode(getDisplayModes());

		displaySelector.removeAllItems();
		for (DisplayMode dm : getDisplayModes()) {
			displaySelector.addItem(dm);
		}
		
		if(currentMode == null) {
			// we didn't already have a display, pick the first
			currentMode = getDisplayModes()[0];
		}

		// restore saved display mode
		setSelectedDisplayMode(currentMode);
		displaySelector.setSelectedIndex(getCurrentDisplayModeIndex(getDisplayModes()));		
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField alphaBits;
	private javax.swing.JTextField antiAlias;
	private javax.swing.JButton browseShapeFile;
	private javax.swing.JCheckBox defaultDisplayShape;
	private javax.swing.JTextField depthBits;
	private javax.swing.JComboBox displaySelector;
	private javax.swing.JTextField displayShapeFile;
	private javax.swing.JCheckBox fullScreen;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JTextField stencilBits;
	// End of variables declaration//GEN-END:variables



	@Override
	public JPanel getConfigurationPanel() {
		return this;
	}

	@Override
	public String getConfigurationPanelName() {
		return "Display";
	}

	public class OBJFilter extends javax.swing.filechooser.FileFilter 
	{
		public boolean accept(File f) {
			if (f.isDirectory()) 
				return true;
			String extension = getExtension(f);
			if ((extension.toUpperCase().equals("OBJ"))) 
				return true; 
			return false;
		}

		public String getDescription(){
			return "OBJ (Wavefront) files";
		}

		private String getExtension(File f){
			String s = f.getName();
			int i = s.lastIndexOf('.');
			if (i > 0 &&  i < s.length() - 1) 
				return s.substring(i+1).toLowerCase();
			return "";
		}
	}


}
