/*
 * NetworkPrefsPanel2.java
 *
 * Created on September 23, 2010, 3:21 PM
 */

package multiplicity.config.network.xmpp;

import javax.swing.JOptionPane;

/**
 *
 * @author  dcs0ah1
 */
public class XMPPPrefsPanel extends javax.swing.JPanel {
	private static final long serialVersionUID = 7749882192186771339L;
	private XMPPConfigPrefsItem prefs;
    
    /** Creates new form NetworkPrefsPanel2 */
    public XMPPPrefsPanel(XMPPConfigPrefsItem networkConfigPrefsItem) {
        this.prefs = networkConfigPrefsItem;
        initComponents();
        loadPrefs();
    }
    
    private void loadPrefs() {
        txtXMPPServerHost.setText(prefs.getXMPPHost());
        txtXMPPServerPort.setText(""+prefs.getXMPPPort());
        txtXMPPUser.setText(prefs.getXMPPUser());
        txtXMPPPassword.setText(prefs.getXMPPPassword());        
        setChooseUserAtLaunch(prefs.getChooseUserAtLaunch());
    }
    
    private void setChooseUserAtLaunch(boolean choose) {
        checkChooseAtLaunch.setSelected(choose);
        txtXMPPUser.setEnabled(!choose);
        txtXMPPPassword.setEnabled(!choose);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtXMPPServerHost = new javax.swing.JTextField();
        txtXMPPServerPort = new javax.swing.JTextField();
        txtXMPPUser = new javax.swing.JTextField();
        txtXMPPPassword = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        checkChooseAtLaunch = new javax.swing.JCheckBox();

        jLabel3.setText("XMPP Server Host:");

        jLabel4.setText("XMPP Server Port:");

        jLabel5.setText("XMPP User:");

        jLabel6.setText("XMPP Password:");

        txtXMPPServerHost.setText("jTextField1");
        txtXMPPServerHost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtXMPPServerHostKeyReleased(evt);
            }
        });

        txtXMPPServerPort.setText("jTextField1");
        txtXMPPServerPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtXMPPServerPortKeyReleased(evt);
            }
        });

        txtXMPPUser.setText("jTextField1");
        txtXMPPUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtXMPPUserKeyReleased(evt);
            }
        });

        txtXMPPPassword.setText("jPasswordField1");
        txtXMPPPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtXMPPPasswordKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel7.setForeground(new java.awt.Color(204, 0, 0));
        jLabel7.setText("WARNING: does not use secure storage.");

        checkChooseAtLaunch.setText("Choose at launch");
        checkChooseAtLaunch.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        checkChooseAtLaunch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkChooseAtLaunchItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtXMPPPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(txtXMPPUser, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(txtXMPPServerPort, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(txtXMPPServerHost, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkChooseAtLaunch)
                    .addComponent(jLabel7))
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtXMPPServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtXMPPServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtXMPPUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkChooseAtLaunch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtXMPPPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(210, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void txtXMPPServerHostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXMPPServerHostKeyReleased
    prefs.setXMPPHost(txtXMPPServerHost.getText());
}//GEN-LAST:event_txtXMPPServerHostKeyReleased

private void txtXMPPServerPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXMPPServerPortKeyReleased
    int currentPort = prefs.getXMPPPort();
    try {
        prefs.setXMPPPort(Integer.parseInt(txtXMPPServerPort.getText()));
    }catch(NumberFormatException ex) {
        JOptionPane.showMessageDialog(this,
            "Can't convert " + txtXMPPServerPort.getText() + " to a number.",
            "Port should be an integer number.",
            JOptionPane.ERROR_MESSAGE);
        txtXMPPServerPort.setText(""+currentPort);
    }
}//GEN-LAST:event_txtXMPPServerPortKeyReleased

private void txtXMPPUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXMPPUserKeyReleased
    prefs.setXMPPUser(txtXMPPUser.getText());
}//GEN-LAST:event_txtXMPPUserKeyReleased

private void txtXMPPPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXMPPPasswordKeyReleased
    String pass = new String(txtXMPPPassword.getPassword());
    
    prefs.setXMPPPassword(pass);
}//GEN-LAST:event_txtXMPPPasswordKeyReleased

private void checkChooseAtLaunchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkChooseAtLaunchItemStateChanged
    prefs.setChooseUserAtLaunch(checkChooseAtLaunch.isSelected());
    setChooseUserAtLaunch(checkChooseAtLaunch.isSelected());
}//GEN-LAST:event_checkChooseAtLaunchItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkChooseAtLaunch;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField txtXMPPPassword;
    private javax.swing.JTextField txtXMPPServerHost;
    private javax.swing.JTextField txtXMPPServerPort;
    private javax.swing.JTextField txtXMPPUser;
    // End of variables declaration//GEN-END:variables

}
